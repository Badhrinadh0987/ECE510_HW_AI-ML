{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 5,
  "nbformat": 4,
  "cells": [
    {
      "id": "317b7499-a7d1-4ce8-81ad-067e67927016",
      "cell_type": "code",
      "source": "import numpy as np\nimport dis\nimport py_compile\nfrom scipy.integrate import solve_ivp\n\n# 1. Differential Equation Solver (Runge-Kutta for dy/dx = -2y)\ndef ode_solver():\n    def dydt(t, y): return -2 * y\n    sol = solve_ivp(dydt, [0, 5], [1], method='RK45')\n    print(\"ODE Solution:\", sol.y)\n\n# 2. Quicksort Algorithm\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n        \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\ndef run_quicksort():\n    arr = [3, 6, 8, 10, 1, 2, 1]\n    print(\"Quicksort Result:\", quicksort(arr))\n\n# 3. Matrix Multiplication\ndef matrix_multiplication():\n    A = np.array([[1, 2], [3, 4]])\n    B = np.array([[5, 6], [7, 8]])\n    result = np.dot(A, B)\n    print(\"Matrix Multiplication Result:\\n\", result)\n\n# Run all workloads\node_solver()\nrun_quicksort()\nmatrix_multiplication()\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "ODE Solution: [[1.00000000e+00 8.59330265e-01 3.39954077e-01 1.41634832e-01\n  5.88020563e-02 2.44004625e-02 1.01080684e-02 4.17064112e-03\n  1.70480502e-03 6.82283272e-04 2.61139397e-04 9.18493878e-05\n  4.57237894e-05]]\nQuicksort Result: [1, 1, 2, 3, 6, 8, 10]\nMatrix Multiplication Result:\n [[19 22]\n [43 50]]\n"
        }
      ],
      "execution_count": 1
    },
    {
      "id": "59c08d91-82fb-4693-b785-487c4c56c8c0",
      "cell_type": "code",
      "source": "import py_compile\n\n# Compile the script\npy_compile.compile(\"workload.py\")\n\nprint(\"Bytecode compiled successfully!\")\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "Bytecode compiled successfully!\n"
        }
      ],
      "execution_count": 6
    },
    {
      "id": "2d4314ed-7992-4126-bcd0-fdc40ce35da1",
      "cell_type": "code",
      "source": "import dis\n\nwith open(\"workload.py\") as f:\n    code = f.read()\n\ndis.dis(code)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "  0           0 RESUME                   0\n\n  1           2 LOAD_CONST               0 ('python')\n              4 LOAD_CONST               1 ('Python (Pyodide)')\n              6 LOAD_CONST               0 ('python')\n              8 LOAD_CONST               2 (('name', 'display_name', 'language'))\n             10 BUILD_CONST_KEY_MAP      3\n             12 LOAD_CONST               0 ('python')\n             14 LOAD_CONST               3 (3)\n             16 LOAD_CONST               4 (('name', 'version'))\n             18 BUILD_CONST_KEY_MAP      2\n             20 LOAD_CONST               5 ('.py')\n             22 LOAD_CONST               6 ('text/x-python')\n             24 LOAD_CONST               0 ('python')\n             26 LOAD_CONST               0 ('python')\n             28 LOAD_CONST               7 ('ipython3')\n             30 LOAD_CONST               8 ('3.8')\n             32 LOAD_CONST               9 (('codemirror_mode', 'file_extension', 'mimetype', 'name', 'nbconvert_exporter', 'pygments_lexer', 'version'))\n             34 BUILD_CONST_KEY_MAP      7\n             36 LOAD_CONST              10 (('kernelspec', 'language_info'))\n             38 BUILD_CONST_KEY_MAP      2\n             40 LOAD_CONST              11 (5)\n             42 LOAD_CONST              12 (4)\n             44 LOAD_CONST              13 ('317b7499-a7d1-4ce8-81ad-067e67927016')\n             46 LOAD_CONST              14 ('code')\n             48 LOAD_CONST              15 ('import numpy as np\\nimport dis\\nimport py_compile\\nfrom scipy.integrate import solve_ivp\\n\\n# 1. Differential Equation Solver (Runge-Kutta for dy/dx = -2y)\\ndef ode_solver():\\n    def dydt(t, y): return -2 * y\\n    sol = solve_ivp(dydt, [0, 5], [1], method=\\'RK45\\')\\n    print(\"ODE Solution:\", sol.y)\\n\\n# 2. Quicksort Algorithm\\ndef quicksort(arr):\\n    if len(arr) <= 1:\\n        return arr\\n        \\n    pivot = arr[len(arr) // 2]\\n    left = [x for x in arr if x < pivot]\\n    middle = [x for x in arr if x == pivot]\\n    right = [x for x in arr if x > pivot]\\n    return quicksort(left) + middle + quicksort(right)\\n\\ndef run_quicksort():\\n    arr = [3, 6, 8, 10, 1, 2, 1]\\n    print(\"Quicksort Result:\", quicksort(arr))\\n\\n# 3. Matrix Multiplication\\ndef matrix_multiplication():\\n    A = np.array([[1, 2], [3, 4]])\\n    B = np.array([[5, 6], [7, 8]])\\n    result = np.dot(A, B)\\n    print(\"Matrix Multiplication Result:\\\\n\", result)\\n\\n# Run all workloads\\node_solver()\\nrun_quicksort()\\nmatrix_multiplication()\\n')\n             50 LOAD_CONST              16 ('trusted')\n             52 LOAD_NAME                0 (true)\n             54 BUILD_MAP                1\n             56 LOAD_CONST              17 ('stdout')\n             58 LOAD_CONST              18 ('stream')\n             60 LOAD_CONST              19 ('ODE Solution: [[1.00000000e+00 8.59330265e-01 3.39954077e-01 1.41634832e-01\\n  5.88020563e-02 2.44004625e-02 1.01080684e-02 4.17064112e-03\\n  1.70480502e-03 6.82283272e-04 2.61139397e-04 9.18493878e-05\\n  4.57237894e-05]]\\nQuicksort Result: [1, 1, 2, 3, 6, 8, 10]\\nMatrix Multiplication Result:\\n [[19 22]\\n [43 50]]\\n')\n             62 LOAD_CONST              20 (('name', 'output_type', 'text'))\n             64 BUILD_CONST_KEY_MAP      3\n             66 BUILD_LIST               1\n             68 LOAD_CONST              21 (1)\n             70 LOAD_CONST              22 (('id', 'cell_type', 'source', 'metadata', 'outputs', 'execution_count'))\n             72 BUILD_CONST_KEY_MAP      6\n             74 LOAD_CONST              23 ('59c08d91-82fb-4693-b785-487c4c56c8c0')\n             76 LOAD_CONST              14 ('code')\n             78 LOAD_CONST              24 ('')\n             80 LOAD_CONST              16 ('trusted')\n             82 LOAD_NAME                0 (true)\n             84 BUILD_MAP                1\n             86 BUILD_LIST               0\n             88 LOAD_NAME                1 (null)\n             90 LOAD_CONST              22 (('id', 'cell_type', 'source', 'metadata', 'outputs', 'execution_count'))\n             92 BUILD_CONST_KEY_MAP      6\n             94 LOAD_CONST              25 ('2d4314ed-7992-4126-bcd0-fdc40ce35da1')\n             96 LOAD_CONST              14 ('code')\n             98 LOAD_CONST              24 ('')\n            100 LOAD_CONST              16 ('trusted')\n            102 LOAD_NAME                0 (true)\n            104 BUILD_MAP                1\n            106 BUILD_LIST               0\n            108 LOAD_NAME                1 (null)\n            110 LOAD_CONST              22 (('id', 'cell_type', 'source', 'metadata', 'outputs', 'execution_count'))\n            112 BUILD_CONST_KEY_MAP      6\n            114 BUILD_LIST               3\n            116 LOAD_CONST              26 (('metadata', 'nbformat_minor', 'nbformat', 'cells'))\n            118 BUILD_CONST_KEY_MAP      4\n            120 RETURN_VALUE\n"
        }
      ],
      "execution_count": 7
    },
    {
      "id": "97968419-551a-416e-a96e-c095d8a1d944",
      "cell_type": "code",
      "source": "import dis\n\nwith open(\"workload.py\", \"r\") as f:\n    code = f.read()\n\ncompiled_code = compile(code, \"workload.py\", \"exec\")\ndis.dis(compiled_code)",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": "  0           0 RESUME                   0\n\n  1           2 LOAD_CONST               0 ('python')\n              4 LOAD_CONST               1 ('Python (Pyodide)')\n              6 LOAD_CONST               0 ('python')\n              8 LOAD_CONST               2 (('name', 'display_name', 'language'))\n             10 BUILD_CONST_KEY_MAP      3\n             12 LOAD_CONST               0 ('python')\n             14 LOAD_CONST               3 (3)\n             16 LOAD_CONST               4 (('name', 'version'))\n             18 BUILD_CONST_KEY_MAP      2\n             20 LOAD_CONST               5 ('.py')\n             22 LOAD_CONST               6 ('text/x-python')\n             24 LOAD_CONST               0 ('python')\n             26 LOAD_CONST               0 ('python')\n             28 LOAD_CONST               7 ('ipython3')\n             30 LOAD_CONST               8 ('3.8')\n             32 LOAD_CONST               9 (('codemirror_mode', 'file_extension', 'mimetype', 'name', 'nbconvert_exporter', 'pygments_lexer', 'version'))\n             34 BUILD_CONST_KEY_MAP      7\n             36 LOAD_CONST              10 (('kernelspec', 'language_info'))\n             38 BUILD_CONST_KEY_MAP      2\n             40 LOAD_CONST              11 (5)\n             42 LOAD_CONST              12 (4)\n             44 LOAD_CONST              13 ('317b7499-a7d1-4ce8-81ad-067e67927016')\n             46 LOAD_CONST              14 ('code')\n             48 LOAD_CONST              15 ('import numpy as np\\nimport dis\\nimport py_compile\\nfrom scipy.integrate import solve_ivp\\n\\n# 1. Differential Equation Solver (Runge-Kutta for dy/dx = -2y)\\ndef ode_solver():\\n    def dydt(t, y): return -2 * y\\n    sol = solve_ivp(dydt, [0, 5], [1], method=\\'RK45\\')\\n    print(\"ODE Solution:\", sol.y)\\n\\n# 2. Quicksort Algorithm\\ndef quicksort(arr):\\n    if len(arr) <= 1:\\n        return arr\\n        \\n    pivot = arr[len(arr) // 2]\\n    left = [x for x in arr if x < pivot]\\n    middle = [x for x in arr if x == pivot]\\n    right = [x for x in arr if x > pivot]\\n    return quicksort(left) + middle + quicksort(right)\\n\\ndef run_quicksort():\\n    arr = [3, 6, 8, 10, 1, 2, 1]\\n    print(\"Quicksort Result:\", quicksort(arr))\\n\\n# 3. Matrix Multiplication\\ndef matrix_multiplication():\\n    A = np.array([[1, 2], [3, 4]])\\n    B = np.array([[5, 6], [7, 8]])\\n    result = np.dot(A, B)\\n    print(\"Matrix Multiplication Result:\\\\n\", result)\\n\\n# Run all workloads\\node_solver()\\nrun_quicksort()\\nmatrix_multiplication()\\n')\n             50 LOAD_CONST              16 ('trusted')\n             52 LOAD_NAME                0 (true)\n             54 BUILD_MAP                1\n             56 LOAD_CONST              17 ('stdout')\n             58 LOAD_CONST              18 ('stream')\n             60 LOAD_CONST              19 ('ODE Solution: [[1.00000000e+00 8.59330265e-01 3.39954077e-01 1.41634832e-01\\n  5.88020563e-02 2.44004625e-02 1.01080684e-02 4.17064112e-03\\n  1.70480502e-03 6.82283272e-04 2.61139397e-04 9.18493878e-05\\n  4.57237894e-05]]\\nQuicksort Result: [1, 1, 2, 3, 6, 8, 10]\\nMatrix Multiplication Result:\\n [[19 22]\\n [43 50]]\\n')\n             62 LOAD_CONST              20 (('name', 'output_type', 'text'))\n             64 BUILD_CONST_KEY_MAP      3\n             66 BUILD_LIST               1\n             68 LOAD_CONST              21 (1)\n             70 LOAD_CONST              22 (('id', 'cell_type', 'source', 'metadata', 'outputs', 'execution_count'))\n             72 BUILD_CONST_KEY_MAP      6\n             74 LOAD_CONST              23 ('59c08d91-82fb-4693-b785-487c4c56c8c0')\n             76 LOAD_CONST              14 ('code')\n             78 LOAD_CONST              24 ('import py_compile\\n\\n# Compile the script\\npy_compile.compile(\"workload.py\")\\n\\nprint(\"Bytecode compiled successfully!\")\\n')\n             80 LOAD_CONST              16 ('trusted')\n             82 LOAD_NAME                0 (true)\n             84 BUILD_MAP                1\n             86 LOAD_CONST              17 ('stdout')\n             88 LOAD_CONST              18 ('stream')\n             90 LOAD_CONST              25 ('Bytecode compiled successfully!\\n')\n             92 LOAD_CONST              20 (('name', 'output_type', 'text'))\n             94 BUILD_CONST_KEY_MAP      3\n             96 BUILD_LIST               1\n             98 LOAD_CONST              26 (6)\n            100 LOAD_CONST              22 (('id', 'cell_type', 'source', 'metadata', 'outputs', 'execution_count'))\n            102 BUILD_CONST_KEY_MAP      6\n            104 LOAD_CONST              27 ('2d4314ed-7992-4126-bcd0-fdc40ce35da1')\n            106 LOAD_CONST              14 ('code')\n            108 LOAD_CONST              28 ('import dis\\n\\nwith open(\"workload.py\") as f:\\n    code = f.read()\\n\\ndis.dis(code)')\n            110 LOAD_CONST              16 ('trusted')\n            112 LOAD_NAME                0 (true)\n            114 BUILD_MAP                1\n            116 LOAD_CONST              17 ('stdout')\n            118 LOAD_CONST              18 ('stream')\n            120 LOAD_CONST              29 ('  0           0 RESUME                   0\\n\\n  1           2 LOAD_CONST               0 (\\'python\\')\\n              4 LOAD_CONST               1 (\\'Python (Pyodide)\\')\\n              6 LOAD_CONST               0 (\\'python\\')\\n              8 LOAD_CONST               2 ((\\'name\\', \\'display_name\\', \\'language\\'))\\n             10 BUILD_CONST_KEY_MAP      3\\n             12 LOAD_CONST               0 (\\'python\\')\\n             14 LOAD_CONST               3 (3)\\n             16 LOAD_CONST               4 ((\\'name\\', \\'version\\'))\\n             18 BUILD_CONST_KEY_MAP      2\\n             20 LOAD_CONST               5 (\\'.py\\')\\n             22 LOAD_CONST               6 (\\'text/x-python\\')\\n             24 LOAD_CONST               0 (\\'python\\')\\n             26 LOAD_CONST               0 (\\'python\\')\\n             28 LOAD_CONST               7 (\\'ipython3\\')\\n             30 LOAD_CONST               8 (\\'3.8\\')\\n             32 LOAD_CONST               9 ((\\'codemirror_mode\\', \\'file_extension\\', \\'mimetype\\', \\'name\\', \\'nbconvert_exporter\\', \\'pygments_lexer\\', \\'version\\'))\\n             34 BUILD_CONST_KEY_MAP      7\\n             36 LOAD_CONST              10 ((\\'kernelspec\\', \\'language_info\\'))\\n             38 BUILD_CONST_KEY_MAP      2\\n             40 LOAD_CONST              11 (5)\\n             42 LOAD_CONST              12 (4)\\n             44 LOAD_CONST              13 (\\'317b7499-a7d1-4ce8-81ad-067e67927016\\')\\n             46 LOAD_CONST              14 (\\'code\\')\\n             48 LOAD_CONST              15 (\\'import numpy as np\\\\nimport dis\\\\nimport py_compile\\\\nfrom scipy.integrate import solve_ivp\\\\n\\\\n# 1. Differential Equation Solver (Runge-Kutta for dy/dx = -2y)\\\\ndef ode_solver():\\\\n    def dydt(t, y): return -2 * y\\\\n    sol = solve_ivp(dydt, [0, 5], [1], method=\\\\\\'RK45\\\\\\')\\\\n    print(\"ODE Solution:\", sol.y)\\\\n\\\\n# 2. Quicksort Algorithm\\\\ndef quicksort(arr):\\\\n    if len(arr) <= 1:\\\\n        return arr\\\\n        \\\\n    pivot = arr[len(arr) // 2]\\\\n    left = [x for x in arr if x < pivot]\\\\n    middle = [x for x in arr if x == pivot]\\\\n    right = [x for x in arr if x > pivot]\\\\n    return quicksort(left) + middle + quicksort(right)\\\\n\\\\ndef run_quicksort():\\\\n    arr = [3, 6, 8, 10, 1, 2, 1]\\\\n    print(\"Quicksort Result:\", quicksort(arr))\\\\n\\\\n# 3. Matrix Multiplication\\\\ndef matrix_multiplication():\\\\n    A = np.array([[1, 2], [3, 4]])\\\\n    B = np.array([[5, 6], [7, 8]])\\\\n    result = np.dot(A, B)\\\\n    print(\"Matrix Multiplication Result:\\\\\\\\n\", result)\\\\n\\\\n# Run all workloads\\\\node_solver()\\\\nrun_quicksort()\\\\nmatrix_multiplication()\\\\n\\')\\n             50 LOAD_CONST              16 (\\'trusted\\')\\n             52 LOAD_NAME                0 (true)\\n             54 BUILD_MAP                1\\n             56 LOAD_CONST              17 (\\'stdout\\')\\n             58 LOAD_CONST              18 (\\'stream\\')\\n             60 LOAD_CONST              19 (\\'ODE Solution: [[1.00000000e+00 8.59330265e-01 3.39954077e-01 1.41634832e-01\\\\n  5.88020563e-02 2.44004625e-02 1.01080684e-02 4.17064112e-03\\\\n  1.70480502e-03 6.82283272e-04 2.61139397e-04 9.18493878e-05\\\\n  4.57237894e-05]]\\\\nQuicksort Result: [1, 1, 2, 3, 6, 8, 10]\\\\nMatrix Multiplication Result:\\\\n [[19 22]\\\\n [43 50]]\\\\n\\')\\n             62 LOAD_CONST              20 ((\\'name\\', \\'output_type\\', \\'text\\'))\\n             64 BUILD_CONST_KEY_MAP      3\\n             66 BUILD_LIST               1\\n             68 LOAD_CONST              21 (1)\\n             70 LOAD_CONST              22 ((\\'id\\', \\'cell_type\\', \\'source\\', \\'metadata\\', \\'outputs\\', \\'execution_count\\'))\\n             72 BUILD_CONST_KEY_MAP      6\\n             74 LOAD_CONST              23 (\\'59c08d91-82fb-4693-b785-487c4c56c8c0\\')\\n             76 LOAD_CONST              14 (\\'code\\')\\n             78 LOAD_CONST              24 (\\'\\')\\n             80 LOAD_CONST              16 (\\'trusted\\')\\n             82 LOAD_NAME                0 (true)\\n             84 BUILD_MAP                1\\n             86 BUILD_LIST               0\\n             88 LOAD_NAME                1 (null)\\n             90 LOAD_CONST              22 ((\\'id\\', \\'cell_type\\', \\'source\\', \\'metadata\\', \\'outputs\\', \\'execution_count\\'))\\n             92 BUILD_CONST_KEY_MAP      6\\n             94 LOAD_CONST              25 (\\'2d4314ed-7992-4126-bcd0-fdc40ce35da1\\')\\n             96 LOAD_CONST              14 (\\'code\\')\\n             98 LOAD_CONST              24 (\\'\\')\\n            100 LOAD_CONST              16 (\\'trusted\\')\\n            102 LOAD_NAME                0 (true)\\n            104 BUILD_MAP                1\\n            106 BUILD_LIST               0\\n            108 LOAD_NAME                1 (null)\\n            110 LOAD_CONST              22 ((\\'id\\', \\'cell_type\\', \\'source\\', \\'metadata\\', \\'outputs\\', \\'execution_count\\'))\\n            112 BUILD_CONST_KEY_MAP      6\\n            114 BUILD_LIST               3\\n            116 LOAD_CONST              26 ((\\'metadata\\', \\'nbformat_minor\\', \\'nbformat\\', \\'cells\\'))\\n            118 BUILD_CONST_KEY_MAP      4\\n            120 RETURN_VALUE\\n')\n            122 LOAD_CONST              20 (('name', 'output_type', 'text'))\n            124 BUILD_CONST_KEY_MAP      3\n            126 BUILD_LIST               1\n            128 LOAD_CONST              30 (7)\n            130 LOAD_CONST              22 (('id', 'cell_type', 'source', 'metadata', 'outputs', 'execution_count'))\n            132 BUILD_CONST_KEY_MAP      6\n            134 LOAD_CONST              31 ('97968419-551a-416e-a96e-c095d8a1d944')\n            136 LOAD_CONST              14 ('code')\n            138 LOAD_CONST              32 ('')\n            140 LOAD_CONST              16 ('trusted')\n            142 LOAD_NAME                0 (true)\n            144 BUILD_MAP                1\n            146 BUILD_LIST               0\n            148 LOAD_NAME                1 (null)\n            150 LOAD_CONST              22 (('id', 'cell_type', 'source', 'metadata', 'outputs', 'execution_count'))\n            152 BUILD_CONST_KEY_MAP      6\n            154 BUILD_LIST               4\n            156 LOAD_CONST              33 (('metadata', 'nbformat_minor', 'nbformat', 'cells'))\n            158 BUILD_CONST_KEY_MAP      4\n            160 POP_TOP\n            162 RETURN_CONST            34 (None)\n"
        }
      ],
      "execution_count": 8
    },
    {
      "id": "ddbf7d1b-3d2d-4c96-bd22-85d2f63ad117",
      "cell_type": "code",
      "source": "import dis\nimport collections\n\n# Load the script as a module\nimport workload  \n\n# List of arithmetic instructions\narithmetic_ops = {\n    \"BINARY_ADD\", \"BINARY_SUBTRACT\", \"BINARY_MULTIPLY\", \n    \"BINARY_TRUE_DIVIDE\", \"BINARY_FLOOR_DIVIDE\", \"BINARY_MODULO\", \n    \"BINARY_POWER\"\n}\n\ndef count_arithmetic(func):\n    bytecode = dis.Bytecode(func)\n    counter = collections.Counter(instr.opname for instr in bytecode)\n    return {op: counter[op] for op in arithmetic_ops if op in counter}\n\n# Count arithmetic instructions in each function\nprint(\"ODE Solver:\", count_arithmetic(workload.ode_solver))\nprint(\"Quicksort:\", count_arithmetic(workload.quicksort))\nprint(\"Matrix Multiplication:\", count_arithmetic(workload.matrix_multiplication))\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [
        {
          "ename": "<class 'NameError'>",
          "evalue": "name 'true' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "Cell \u001b[0;32mIn[9], line 5\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Load the script as a module\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mworkload\u001b[39;00m  \n\u001b[1;32m      7\u001b[0m \u001b[38;5;66;03m# List of arithmetic instructions\u001b[39;00m\n\u001b[1;32m      8\u001b[0m arithmetic_ops \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m      9\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBINARY_ADD\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBINARY_SUBTRACT\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBINARY_MULTIPLY\u001b[39m\u001b[38;5;124m\"\u001b[39m, \n\u001b[1;32m     10\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBINARY_TRUE_DIVIDE\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBINARY_FLOOR_DIVIDE\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBINARY_MODULO\u001b[39m\u001b[38;5;124m\"\u001b[39m, \n\u001b[1;32m     11\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBINARY_POWER\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     12\u001b[0m }\n",
            "File \u001b[0;32m/drive/workload.py:1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m\"\u001b[39m:{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mkernelspec\u001b[39m\u001b[38;5;124m\"\u001b[39m:{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdisplay_name\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPython (Pyodide)\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlanguage\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m\"\u001b[39m},\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlanguage_info\u001b[39m\u001b[38;5;124m\"\u001b[39m:{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcodemirror_mode\u001b[39m\u001b[38;5;124m\"\u001b[39m:{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mversion\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m3\u001b[39m},\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfile_extension\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m.py\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmimetype\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext/x-python\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnbconvert_exporter\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpygments_lexer\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mipython3\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mversion\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m3.8\u001b[39m\u001b[38;5;124m\"\u001b[39m}},\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnbformat_minor\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m5\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnbformat\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m4\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcells\u001b[39m\u001b[38;5;124m\"\u001b[39m:[{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m317b7499-a7d1-4ce8-81ad-067e67927016\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcell_type\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcode\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msource\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mimport numpy as np\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mimport dis\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mimport py_compile\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mfrom scipy.integrate import solve_ivp\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m# 1. Differential Equation Solver (Runge-Kutta for dy/dx = -2y)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mdef ode_solver():\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    def dydt(t, y): return -2 * y\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    sol = solve_ivp(dydt, [0, 5], [1], method=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mRK45\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    print(\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124mODE Solution:\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124m, sol.y)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m# 2. Quicksort Algorithm\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mdef quicksort(arr):\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    if len(arr) <= 1:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m        return arr\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m        \u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    pivot = arr[len(arr) // 2]\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    left = [x for x in arr if x < pivot]\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    middle = [x for x in arr if x == pivot]\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    right = [x for x in arr if x > pivot]\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    return quicksort(left) + middle + quicksort(right)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mdef run_quicksort():\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    arr = [3, 6, 8, 10, 1, 2, 1]\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    print(\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124mQuicksort Result:\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124m, quicksort(arr))\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m# 3. Matrix Multiplication\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mdef matrix_multiplication():\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    A = np.array([[1, 2], [3, 4]])\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    B = np.array([[5, 6], [7, 8]])\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    result = np.dot(A, B)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    print(\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124mMatrix Multiplication Result:\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124m, result)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m# Run all workloads\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mode_solver()\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mrun_quicksort()\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mmatrix_multiplication()\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m\"\u001b[39m:{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrusted\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[43mtrue\u001b[49m},\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124moutputs\u001b[39m\u001b[38;5;124m\"\u001b[39m:[{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstdout\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124moutput_type\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstream\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mODE Solution: [[1.00000000e+00 8.59330265e-01 3.39954077e-01 1.41634832e-01\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m  5.88020563e-02 2.44004625e-02 1.01080684e-02 4.17064112e-03\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m  1.70480502e-03 6.82283272e-04 2.61139397e-04 9.18493878e-05\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m  4.57237894e-05]]\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mQuicksort Result: [1, 1, 2, 3, 6, 8, 10]\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mMatrix Multiplication Result:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m [[19 22]\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m [43 50]]\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m}],\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mexecution_count\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m1\u001b[39m},{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m59c08d91-82fb-4693-b785-487c4c56c8c0\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcell_type\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcode\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msource\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mimport py_compile\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m# Compile the script\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mpy_compile.compile(\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124mworkload.py\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mprint(\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124mBytecode compiled successfully!\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m\"\u001b[39m:{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrusted\u001b[39m\u001b[38;5;124m\"\u001b[39m:true},\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124moutputs\u001b[39m\u001b[38;5;124m\"\u001b[39m:[{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstdout\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124moutput_type\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstream\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBytecode compiled successfully!\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m}],\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mexecution_count\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m6\u001b[39m},{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2d4314ed-7992-4126-bcd0-fdc40ce35da1\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcell_type\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcode\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msource\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mimport dis\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mwith open(\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124mworkload.py\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124m) as f:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m    code = f.read()\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mdis.dis(code)\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m\"\u001b[39m:{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrusted\u001b[39m\u001b[38;5;124m\"\u001b[39m:true},\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124moutputs\u001b[39m\u001b[38;5;124m\"\u001b[39m:[{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstdout\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124moutput_type\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstream\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m  0           0 RESUME                   0\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m  1           2 LOAD_CONST               0 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m              4 LOAD_CONST               1 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPython (Pyodide)\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m              6 LOAD_CONST               0 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m              8 LOAD_CONST               2 ((\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mdisplay_name\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlanguage\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m))\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             10 BUILD_CONST_KEY_MAP      3\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             12 LOAD_CONST               0 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             14 LOAD_CONST               3 (3)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             16 LOAD_CONST               4 ((\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mversion\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m))\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             18 BUILD_CONST_KEY_MAP      2\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             20 LOAD_CONST               5 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.py\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             22 LOAD_CONST               6 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtext/x-python\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             24 LOAD_CONST               0 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             26 LOAD_CONST               0 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpython\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             28 LOAD_CONST               7 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mipython3\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             30 LOAD_CONST               8 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m3.8\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             32 LOAD_CONST               9 ((\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcodemirror_mode\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfile_extension\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmimetype\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnbconvert_exporter\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpygments_lexer\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mversion\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m))\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             34 BUILD_CONST_KEY_MAP      7\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             36 LOAD_CONST              10 ((\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mkernelspec\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlanguage_info\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m))\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             38 BUILD_CONST_KEY_MAP      2\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             40 LOAD_CONST              11 (5)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             42 LOAD_CONST              12 (4)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             44 LOAD_CONST              13 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m317b7499-a7d1-4ce8-81ad-067e67927016\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             46 LOAD_CONST              14 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcode\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             48 LOAD_CONST              15 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mimport numpy as np\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mnimport dis\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mnimport py_compile\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mnfrom scipy.integrate import solve_ivp\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn# 1. Differential Equation Solver (Runge-Kutta for dy/dx = -2y)\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mndef ode_solver():\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    def dydt(t, y): return -2 * y\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    sol = solve_ivp(dydt, [0, 5], [1], method=\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mRK45\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    print(\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124mODE Solution:\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124m, sol.y)\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn# 2. Quicksort Algorithm\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mndef quicksort(arr):\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    if len(arr) <= 1:\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn        return arr\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn        \u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    pivot = arr[len(arr) // 2]\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    left = [x for x in arr if x < pivot]\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    middle = [x for x in arr if x == pivot]\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    right = [x for x in arr if x > pivot]\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    return quicksort(left) + middle + quicksort(right)\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mndef run_quicksort():\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    arr = [3, 6, 8, 10, 1, 2, 1]\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    print(\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124mQuicksort Result:\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124m, quicksort(arr))\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn# 3. Matrix Multiplication\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mndef matrix_multiplication():\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    A = np.array([[1, 2], [3, 4]])\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    B = np.array([[5, 6], [7, 8]])\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    result = np.dot(A, B)\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn    print(\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124mMatrix Multiplication Result:\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn\u001b[39m\u001b[38;5;130;01m\\\"\u001b[39;00m\u001b[38;5;124m, result)\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn# Run all workloads\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mnode_solver()\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mnrun_quicksort()\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mnmatrix_multiplication()\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             50 LOAD_CONST              16 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtrusted\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             52 LOAD_NAME                0 (true)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             54 BUILD_MAP                1\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             56 LOAD_CONST              17 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstdout\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             58 LOAD_CONST              18 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mstream\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             60 LOAD_CONST              19 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mODE Solution: [[1.00000000e+00 8.59330265e-01 3.39954077e-01 1.41634832e-01\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn  5.88020563e-02 2.44004625e-02 1.01080684e-02 4.17064112e-03\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn  1.70480502e-03 6.82283272e-04 2.61139397e-04 9.18493878e-05\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn  4.57237894e-05]]\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mnQuicksort Result: [1, 1, 2, 3, 6, 8, 10]\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mnMatrix Multiplication Result:\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn [[19 22]\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn [43 50]]\u001b[39m\u001b[38;5;130;01m\\\\\u001b[39;00m\u001b[38;5;124mn\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             62 LOAD_CONST              20 ((\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mname\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124moutput_type\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtext\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m))\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             64 BUILD_CONST_KEY_MAP      3\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             66 BUILD_LIST               1\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             68 LOAD_CONST              21 (1)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             70 LOAD_CONST              22 ((\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcell_type\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msource\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124moutputs\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mexecution_count\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m))\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             72 BUILD_CONST_KEY_MAP      6\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             74 LOAD_CONST              23 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m59c08d91-82fb-4693-b785-487c4c56c8c0\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             76 LOAD_CONST              14 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcode\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             78 LOAD_CONST              24 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             80 LOAD_CONST              16 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtrusted\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             82 LOAD_NAME                0 (true)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             84 BUILD_MAP                1\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             86 BUILD_LIST               0\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             88 LOAD_NAME                1 (null)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             90 LOAD_CONST              22 ((\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcell_type\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msource\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124moutputs\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mexecution_count\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m))\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             92 BUILD_CONST_KEY_MAP      6\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             94 LOAD_CONST              25 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m2d4314ed-7992-4126-bcd0-fdc40ce35da1\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             96 LOAD_CONST              14 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcode\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m             98 LOAD_CONST              24 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m            100 LOAD_CONST              16 (\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mtrusted\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m            102 LOAD_NAME                0 (true)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m            104 BUILD_MAP                1\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m            106 BUILD_LIST               0\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m            108 LOAD_NAME                1 (null)\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m            110 LOAD_CONST              22 ((\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcell_type\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124msource\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124moutputs\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mexecution_count\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m))\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m            112 BUILD_CONST_KEY_MAP      6\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m            114 BUILD_LIST               3\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m            116 LOAD_CONST              26 ((\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnbformat_minor\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnbformat\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m, \u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcells\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m))\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m            118 BUILD_CONST_KEY_MAP      4\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m            120 RETURN_VALUE\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m}],\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mexecution_count\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;241m7\u001b[39m},{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m97968419-551a-416e-a96e-c095d8a1d944\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcell_type\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcode\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msource\u001b[39m\u001b[38;5;124m\"\u001b[39m:\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmetadata\u001b[39m\u001b[38;5;124m\"\u001b[39m:{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrusted\u001b[39m\u001b[38;5;124m\"\u001b[39m:true},\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124moutputs\u001b[39m\u001b[38;5;124m\"\u001b[39m:[],\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mexecution_count\u001b[39m\u001b[38;5;124m\"\u001b[39m:null}]}\n",
            "\u001b[0;31mNameError\u001b[0m: name 'true' is not defined"
          ],
          "output_type": "error"
        }
      ],
      "execution_count": 9
    },
    {
      "id": "1322b522-6d0a-4909-9afd-bfe5986303f0",
      "cell_type": "code",
      "source": "",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}