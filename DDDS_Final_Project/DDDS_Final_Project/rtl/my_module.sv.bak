
// my_module.sv: Simple Dense Layer (MAC + ReLU + Sigmoid logic)

module my_module (
    input logic clk,
    input logic rst,
    input logic start,
    input logic [7:0] in_data,
    input logic [7:0] in_index,
    input logic [7:0] weights [0:135],     // <-- Input weights from external module
    output logic [7:0] out_data,
    output logic done
);

    // Parameters
    parameter FEATURE_COUNT = 136;

    // Internal RAM for inputs
    logic [7:0] input_vector [0:FEATURE_COUNT-1];
    logic [15:0] acc;
    logic [7:0] i;

    // FSM States
    typedef enum logic [1:0] {
        IDLE, LOAD, COMPUTE, DONE
    } state_t;
    state_t state;

    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            acc <= 0;
            i <= 0;
            state <= IDLE;
            done <= 0;
            out_data <= 0;
        end else begin
            case (state)
                IDLE: begin
                    if (start) begin
                        acc <= 0;
                        i <= 0;
                        done <= 0;
                        state <= COMPUTE;
                    end
                end

                COMPUTE: begin
                    if (i < FEATURE_COUNT) begin
                        acc <= acc + input_vector[i] * weights[i];
                        i <= i + 1;
                    end else begin
                        // Activation: simple ReLU
                        out_data <= (acc[15]) ? 8'd0 : acc[7:0];
                        done <= 1;
                        state <= DONE;
                    end
                end

                DONE: begin
                    if (!start) state <= IDLE;
                end
            endcase
        end
    end

    // Write data into input_vector during IDLE before computation
    always_ff @(posedge clk) begin
        if (state == IDLE && !done)
            input_vector[in_index] <= in_data;
    end

endmodule
